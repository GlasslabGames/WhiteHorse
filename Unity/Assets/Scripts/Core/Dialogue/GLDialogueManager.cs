//
// GLDialogueManager.cs
// Author: Jerry Fu <jerry@glasslabgames.org>
// 2014 - 8 - 19
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using UnityEngine;
using PixelCrushers.DialogueSystem;
using System.Collections.Generic;
/**
 * Full time baby-sitter of PixelCrushers dialogue system since it can't seem to take care of itself.
 */
public class GLDialogueManager : SingletonBehavior<GLDialogueManager>
{
    // Keep seperate dictionaries of data by type
    [PersistAttribute]
    private Dictionary<string, string> m_dialogueLuaStringData = new Dictionary<string, string>();
    [PersistAttribute]
    private Dictionary<string, int> m_dialogueLuaIntData = new Dictionary<string, int>();

    private readonly string[] persistedLuaStringVariables = {
    "progress",
    "VideoGamePosition",
    "QuestComplete_Quest11",
    "QuestComplete_Quest24",
    "QuestComplete_Quest0-6"
  };

    private readonly string[] persistedLuaIntVariables = {
    "RenRelationship",
    "AdrianRelationship",
    "MayaRelationship",
    "DaraRelationship",
    "SAMRelationship",
    "ChloeRelationship",
    "TelosRelationship",
    "DeanRelationship",
    "LilakaiRelationship"
  };

  private DialogueSystemController m_dialogueController;

  public DialogueDatabase GameDialogueDatabase;
  public GameObject DialogueUI;

  protected GLDialogueManager() {}

  protected override void Awake()
  {
    base.Awake();

    spawnDialogueManager();
  }

  public void SetLuaVariable(string key, string value)
  {
      if (!DialogueLua.DoesVariableExist(key)) Debug.LogWarning("Setting Lua variable " + key + " which doesn't already exist!");

      Lua.Run("Variable[\"" + key + "\"]=\"" + value + "\"");
      Debug.Log("[QuestManager] Setting " + key + " to " + value + " (string): " + DialogueLua.GetVariable(key).AsString);
  }

  override protected void Start()
  {
      base.Start();

      // Re-set dialogue Lua variables
      for (int i = persistedLuaStringVariables.Length - 1; i >= 0; i--)
      {
          string key = persistedLuaStringVariables[i];
          string val = (m_dialogueLuaStringData.ContainsKey(key)) ? m_dialogueLuaStringData[key] : "";
          Lua.Run("Variable[\"" + key + "\"]=\"" + val + "\"");
          //Debug.Log ("[QuestManager] Setting "+key+" to "+val+" (string): "+DialogueLua.GetVariable(key).AsString);
      }

      for (int i = persistedLuaIntVariables.Length - 1; i >= 0; i--)
      {
          string key = persistedLuaIntVariables[i];
          int val = (m_dialogueLuaIntData.ContainsKey(key)) ? m_dialogueLuaIntData[key] : 0;
          Lua.Run("Variable[\"" + key + "\"]=" + val);
          //Debug.Log ("[QuestManager] Setting "+key+" to "+val+" (int): "+DialogueLua.GetVariable(key).AsInt);
      }
  }

  private void spawnDialogueManager()
  {
    if (m_dialogueController == null)
    {
      m_dialogueController = DialogueManager.Instance;
      GameObject obj = m_dialogueController.gameObject;
      obj.transform.parent = this.transform;
      m_dialogueController.initialDatabase = GameDialogueDatabase;
      m_dialogueController.AddDatabase(GameDialogueDatabase);
      m_dialogueController.displaySettings.cameraSettings.defaultSequence = "";
      m_dialogueController.DialogueUI = DialogueUI.GetComponent<GLDialogueUI>();
      m_dialogueController.displaySettings.subtitleSettings.continueButton = DisplaySettings.SubtitleSettings.ContinueButtonMode.Always;
      m_dialogueController.displaySettings.subtitleSettings.showPCSubtitlesDuringLine = 
        m_dialogueController.displaySettings.subtitleSettings.showNPCSubtitlesWithResponses =
          m_dialogueController.displaySettings.subtitleSettings.showNPCSubtitlesDuringLine = true;
      m_dialogueController.displaySettings.inputSettings.alwaysForceResponseMenu = false;
      m_dialogueController.displaySettings.inputSettings.responseTimeout = 0;
      m_dialogueController.displaySettings.alertSettings = new DisplaySettings.AlertSettings(); // spec says default is new'd, but trying to access returns null
      m_dialogueController.displaySettings.alertSettings.alertCheckFrequency = 0f;
      m_dialogueController.debugLevel = DialogueDebug.DebugLevel.Warning;
      m_dialogueController.dontDestroyOnLoad = false;

      if (obj.GetComponent<DialogueEventHandler>() == null)
      {
        obj.AddComponent<DialogueEventHandler>();
      }
    }
  }

  public void StartConversation(string conversationName, Transform actorTransform = null, Transform conversantTransform = null)
  {
    spawnDialogueManager();
    m_dialogueController.StartConversation(conversationName, actorTransform, conversantTransform);
  }

  void OnSave()
  {

      for (int i = persistedLuaStringVariables.Length - 1; i >= 0; i--)
      {
          string key = persistedLuaStringVariables[i];
          if (DialogueLua.DoesVariableExist(key))
          {
              m_dialogueLuaStringData[key] = DialogueLua.GetVariable(key).AsString;
              //Debug.Log ("[QuestManager] Setting "+key+": "+DialogueLua.GetVariable(key).AsString+" into m_dialogueLuaStringData");
          }
          else
          {
              //Debug.Log ("[QuestManager] Couldn't find key "+key+" (string) in DialogueLua!");
          }
      }

      for (int i = persistedLuaIntVariables.Length - 1; i >= 0; i--)
      {
          string key = persistedLuaIntVariables[i];
          if (DialogueLua.DoesVariableExist(key))
          {
              m_dialogueLuaIntData[key] = DialogueLua.GetVariable(key).AsInt;
          }
          else
          {
              Debug.LogWarning("[QuestManager] Couldn't find key " + key + " (int) in DialogueLua!");
          }
      }
  }
}

